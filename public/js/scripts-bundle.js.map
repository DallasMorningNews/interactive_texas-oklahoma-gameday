{"version":3,"sources":["+custom.js"],"names":["$","document","ready","d","Date","year","getFullYear","text"],"mappings":"AAAAA,EAAAC,UAAAC,MAAA,WAOA,GAAAC,GAAA,GAAAC,MACAC,EAAAF,EAAAG,aAEAN,GAAA,cAAAO,KAAAF","file":"scripts-bundle.js","sourcesContent":["$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\n\t// some code blocks require javascript to function, like slideshows, synopsis blocks, etc\n\t// you can find that code here: https://github.com/DallasMorningNews/generator-dmninteractives/wiki/Cookbook\n\n\n\t// // ***** CHARTING VARIABLES *****\n\t//\n\t// // data object to hold parsed data\n\t// var stagingData = [];\n\t//\n\t// // data that d3 uses after we format the stagingData to get it ready right\n\t// var chartData = [];\n\t//\n\t// // placeholder for counted occurrances\n\t// var counts;\n\t//\n\t// // placeholder to hold the score with the most number of instances\n\t// var highestCount;\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// HARVESTING USER INPUT ////////////////////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// // placeholder variables that will hold the score submitted by the user\n\t// var cowboysScore, opponentScore;\n\t//\n\t// $(\"#submit\").click(function() {\n\t//\n\t// \t// grabbinbg the scores in the input fields\n\t// \thornsScore = $(\"#hornsScore\").val();\n\t// \tsoonersScore = $(\"#soonersScore\").val();\n\t// \tconsole.log(hornsScore, soonersScore);\n\t// \t// we've got some work to do now that we have new data submitted\n\t// \t// first, we'll validate that what we got back is a valid score (i.e. numbers)\n\t// \tvalidateScore(hornsScore, soonersScore);\n\t//\n\t// \t// then we're going to update the response the user gets back after valid scores are submitted\n\t// \tupdateResponse(hornsScore, soonersScore);\n\t//\n\t// \t// then we're going to create custom facebook and twitter sharing functions\n\t// \t// based off the score they submitted\n\t// \tsharePicks(hornsScore, soonersScore);\n\t//\n\t// });\n\t//\n\t// /* VALIDATING SCORES */\n\t//\n\t// function validateScore(score1, score2) {\n\t//\n\t// \t// check to make sure both scores are actual numbers\n\t// \tif (isNaN(score1) === true || isNaN(score2) === true) {\n\t// \t\talert(\"Please enter a valid score for both teams\");\n\t// \t\treturn false;\n\t// \t}\n\t//\n\t// \t// check that a score was entered for both teams\n\t// \tif (score1.length === 0 || score2.length === 0) {\n\t// \t\talert(\"Please enter a score for both teams\");\n\t// \t\treturn false;\n\t// \t}\n\t//\n\t// \t// once we know we have valid scores, we're going to create the object that\n\t// \t// will be passed back to the database. The week of the game was created above\n\t// \t// based off the label in the html document. Scores for the cowboys and their\n\t// \t// opponent is gathered from the input fields. Comment is a hold over from\n\t// \t// some optional data collection that we're not currently doing.\n\t// \tvar response = {\n\t// \t\t\"horns\": score1,\n\t// \t\t\"sooners\": score2,\n\t// \t};\n\t//\n\t// \t// send the response object to the database. if succssful, initialize the data draw\n\t// \t// pulling the new set of data down from the database and handing it off to chart drawing functions\n\t// \t$.post(\"http://apps.dallasnews.com/livewire/texou-picks-2016\", response, function() {\n\t// \t\tconsole.log(\"Success!\");\n\t// \t\tinitializeDataDraw();\n\t// \t}).fail(function() {\n\t// \t\tconsole.log(\"Whoops, something bad happened!\");\n\t// \t});\n\t//\n\t// \t// once we know we have valid scores and they've been sent off the database\n\t// \t// we want to hide the submission form and show the response with the\n\t// \t// custom facebook and twitter sharing options\n\t// \t$(\"#userForm\").addClass(\"noShow\");\n\t// \t$(\"#response\").removeClass(\"noShow\");\n\t//\n\t// }\n\t//\n\t// /* UPDATING THE RESPONSE SCORES */\n\t//\n\t// // this updates the custom text generated after a user submits a prediction\n\t// // based on who they think will win and the scores\n\t// function updateResponse(hornsScore, soonersScore) {\n\t//\n\t// \tif (hornsScore > soonersScore) {\n\t//\n\t// \t\t// predicted cowboys win\n\t// \t\t$(\".userScore\").text(hornsScore + \"-\" + soonersScore);\n\t// \t\t$(\".userTeam\").text(\"Longhorns\");\n\t//\n\t// \t} else if (soonersScore > hornsScore) {\n\t//\n\t// \t\t// predicted opponent win\n\t// \t\t$(\".userScore\").text(soonersScore + \"-\" + hornsScore);\n\t// \t\t$(\".userTeam\").text(\"Sooners\");\n\t//\n\t// \t}\n\t// }\n\t//\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// SHARING PICK /////////////////////////////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// function sharePicks(hornsScore, soonersScore) {\n\t//\n\t// \t\t// generating a custom uriLink based off the week in the season (gathered above)\n\t// \t\tvar uriLink = \"http%3A%2F%2Finteractives.dallasnews.com%2F2016%2Ftexas-oklahoma-gameday\";\n\t//\n\t// \t\tvar leadText;\n\t//\n\t// \t\tif (hornsScore >= soonersScore) {\n\t// \t\t\tleadText = \"My UT-OU prediction: Longhorns \" + hornsScore + \", Sooners \" + soonersScore + \". Make your pick now.\";\n\t// \t\t} else {\n\t// \t\t\tleadText = \"My UT-OU prediction: Sooners \" + soonersScore + \", Longhorns \" + hornsScore + \". Make your pick now.\";\n\t// \t\t}\n\t//\n\t// \t\t// facebook sharing function\n\t// \t\t$(\"#faceShare\").click(function () {\n\t// \t\t\t//Facebook share\n\t// \t\t\tFB.ui({\n\t// \t\t\t\tmethod: 'feed',\n\t// \t\t\t\tname: \"Texas-Oklahoma Gameday: You make the call\",\n\t// \t\t\t\tlink: storyURL,\n\t// \t\t\t\tcaption: '',\n\t// \t\t\t\tpicture: storyIMG,\n\t// \t\t\t\tdescription: leadText\n\t// \t\t\t});\n\t// \t\t});\n\t//\n\t// \t\t// twitter sharing function\n\t// \t\t$(\"#twitterShare\").click(function () {\n\t// \t\t\twindow.open(\"https://www.twitter.com/intent/tweet?&hashtags=\" + \"&text=\" + leadText + \"&via=dallasnews&url=\" + uriLink + \"&image=\" + storyIMG, \"top=200, left=200,width=550,height=420\");\n\t// \t\t});\n\t//\n\t// \t}\n\t//\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// CREATE CUSTOM READOUTS ///////////////////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// // this calculates and updates the reader submission stats (team predicted\n\t// // to win the most and by an average of how much)\n\t//\n\t// function customReadouts(data) {\n\t//\n\t// \t// some starting variable: total data length, total times cowboys and\n\t// \t// opponent is predicted to win, total cumulative margin of victory\n\t// \tvar total = data.length;\n\t// \tvar totalHorns = 0;\n\t// \tvar totalSooners = 0;\n\t// \tvar hornsPoints = 0;\n\t// \tvar soonersPoints = 0;\n\t// \tvar winningTeam, winningPct, winningPts;\n\t//\n\t// \t// here we're going through the data. for each entry, we want to determine\n\t// \t// a winner and by how many points they are predicted to win, and then\n\t// \t// update the variable set above (totals and points)\n\t// \t$.each(data, function(key, value) {\n\t// \t\tif (value.hornsscore > value.soonersscore) {\n\t//\n\t// \t\t\ttotalHorns++;\n\t// \t\t\thornsPoints += value.hornsscore - value.soonersscore;\n\t// \t\t\tconsole.log(totalHorns, hornsPoints);\n\t// \t\t} else if (value.soonersscore > value.hornsscore) {\n\t// \t\t\ttotalSooners++;\n\t// \t\t\tsoonersPoints += value.soonersscore - value.hornsscore;\n\t// \t\t}\n\t// \t});\n\t//\n\t// \t// based on the total times they've been picked, either set the winningTeam\n\t// \t// variable to \"Cowboys\" or their opponent\n\t// \twinningTeam = totalHorns >= totalSooners ? \"Longhorns\" : \"Sooners\";\n\t//\n\t// \t// figure out the percentage of submissions have that team winning\n\t// \twinningPct = winningTeam === \"Longhorns\" ? totalHorns / total * 100 : totalSooners / total * 100;\n\t// \twinningPct = Math.round(winningPct * 10) / 10;\n\t//\n\t// \t// figure out the average margin of victory that team is predicted to win by\n\t// \twinningPts = winningTeam === \"Longhorns\" ? Math.round(hornsPoints / totalHorns * 10) / 10 : Math.round(soonersPoints / totalSooners * 10) / 10;\n\t//\n\t//\n\t// \t// update those totals within the html output\n\t// \t$(\".predictPercentage\").text(winningPct + \"%\");\n\t// \t$(\".predictTeam\").text(winningTeam);\n\t// \t$(\".predictPoints\").text(winningPts);\n\t//\n\t// }\n\t//\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// GETTING USER RESPONSES FROM DATABASE /////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// function initializeDataDraw() {\n\t//\n\t// \t// clearing our data variable set earlier. we're clearing these here because\n\t// \t// the chart gets updated after a submission\n\t// \tstagingData = [];\n\t// \tchartData = [];\n\t// \tcounts = \"\";\n\t// \thighestCount = \"\";\n\t//\n\t// \t// clear the chart div to prepare for redraw.\n\t// \t$(\"#chart\").html(\"\");\n\t//\n\t// \t// go get the data based on the current week in the season we are currently viewing\n\t// \t$.getJSON(\"http://apps.dallasnews.com/livewire/texou-picks-2016\").done(function(data) {\n\t//\n\t// \t\t// we've got a little bit of initial cleanup to do on the data. after that's done\n\t// \t\t// we're going to put the clean data in cleanScores.\n\t// \t\tvar cleanScores = [];\n\t//\n\t// \t\t// we're going to weed out any score that is more than 60, because the frequency with which nfl teams\n\t// \t\t// score that much is non-existent. This is mainly clearning out misbehaving score submitters\n\t//\n\t// \t\t$.each(data, function(key,value) {\n\t// \t\t\tif (value.hornsscore < 80 && value.soonersscore < 80 && value.hornsscore !== value.soonersscore)  {\n\t// \t\t\t\tcleanScores.push(value);\n\t// \t\t\t}\n\t// \t\t});\n\t//\n\t// \t\t// once we've got our clean data, we're going to format the data and\n\t// \t\t// generate the customReadouts\n\t// \t\tformatData(cleanScores);\n\t// \t\tcustomReadouts(cleanScores);\n\t// \t});\n\t// }\n\t//\n\t// // get our initial set of data when the page is loaded\n\t// initializeDataDraw();\n\t//\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// FORMATTING USER RESPONSES ////////////////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// function formatData(data) {\n\t//\n\t// \t//parse the sample data into the data object D3 expects\n\t// \tdata.forEach(function(entry) {\n\t// \t  var tempArray = [];\n\t// \t  tempArray.push(entry.hornsscore);\n\t// \t  tempArray.push(entry.soonersscore);\n\t// \t  stagingData.push(tempArray);\n\t// \t});\n\t//\n\t// \t//Create object with counted occurences\n\t// \tcounts = _.countBy(stagingData);\n\t//\n\t// \t//Sort that object's counts and reverse to get highest at 0\n\t// \tvar sorted = _.sortBy(counts).reverse();\n\t//\n\t// \t//The highest count\n\t// \thighestCount = sorted[0];\n\t//\n\t// \t//Avoid duplicate entries by looping through counts instead\n\t// \t//of originalData. Go through each count and get the values from the keys\n\t// \t_.forOwn(counts, function(value, key) {\n\t// \t  var result = key.split(\",\");\n\t// \t  var tempArray = [];\n\t// \t  tempArray.push(parseInt(result[0]));\n\t// \t  tempArray.push(parseInt(result[1]));\n\t// \t  chartData.push(tempArray);\n\t// \t});\n\t//\n\t// \t// hand the formatted data off to the chart drawing function\n\t// \tdrawChart(chartData);\n\t// }\n\t//\n\t//\n\t//\n\t// ////////////////////////////////////////////////////////////////////////////\n\t// ///// DRAWING THE SCATTERPLOT //////////////////////////////////////////////\n\t// ////////////////////////////////////////////////////////////////////////////\n\t//\n\t// function drawChart(data) {\n\t// \tconsole.log(data);\n\t// \t//--------Start D3 Initialization--------\n\t//\n\t// \t//Dimensions\n\t// \tvar margin = {\n\t// \t  top: 10,\n\t// \t  right: 10,\n\t// \t  bottom: 50,\n\t// \t  left: 50\n\t// \t};\n\t// \tvar width = $(\"#chart\").width() - margin.left - margin.right;\n\t// \tvar height = $(\"#chart\").width() - margin.top - margin.bottom;\n\t//\n\t// \tvar halfpoint = (width - margin.left - margin.right) / 2;\n\t//\n\t// \t//Get and set maxValue\n\t// \tvar maxX = d3.max(data, function(d) {\n\t// \t  return d[0];\n\t//   \t});\n\t//\n\t// \tvar maxY = d3.max(data, function(d) {\n\t// \t  return d[1];\n\t//   \t});\n\t//\n\t// \tvar maxValue = 0;\n\t//\n\t// \tif (maxX > maxY) {\n\t// \t  maxValue = maxX;\n\t// \t} else {\n\t// \t  maxValue = maxY;\n\t// \t}\n\t//\n\t// \t//Set X range and domain\n\t// \tvar x = d3.scaleLinear()\n\t// \t  .range([0, width])\n\t// \t  .domain([0, maxValue]);\n\t//\n\t// \t//Set Y range and domain\n\t// \tvar y = d3.scaleLinear()\n\t// \t  .range([height, 0])\n\t// \t  .domain([0, maxValue]);\n\t//\n\t// \t//Prime axis\n\t// \tvar xAxis = d3.axisBottom(x).ticks(10).tickSize(-height);\n\t// \tvar yAxis = d3.axisLeft(y).ticks(10 * height / width).tickSize(-width);\n\t//\n\t// \t//Draw the shell\n\t// \tvar svg = d3.select(\"#chart\").append(\"svg\")\n\t// \t  .attr(\"width\", width + margin.left + margin.right)\n\t// \t  .attr(\"height\", height + margin.top + margin.bottom)\n\t// \t  .append(\"g\")\n\t// \t  .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\t//\n\t// \t//Draw the axis\n\t// \tsvg.append(\"g\")\n\t// \t  .attr(\"class\", \"x axis \")\n\t// \t  .attr('id', \"axis--x\")\n\t// \t  .attr(\"transform\", \"translate(0,\" + height + \")\")\n\t// \t  .call(xAxis);\n\t//\n\t// \tsvg.append(\"g\")\n\t// \t  .attr(\"class\", \"y axis\")\n\t// \t  .attr('id', \"axis--y\")\n\t// \t  .call(yAxis);\n\t//\n\t// \t//Draw the dots\n\t// \tvar r = d3.scaleLinear()\n\t// \t  //Range for dot sizes\n\t// \t  .range([5, 20])\n\t// \t  //Set the domain from data values\n\t// \t  .domain([1, highestCount]);\n\t//\n\t// \tsvg.selectAll(\".dot\")\n\t// \t  .data(data)\n\t// \t  .enter().append(\"circle\")\n\t// \t  .attr(\"class\", \"dot\")\n\t// \t  .attr(\"r\", function(d) {\n\t// \t    var thisCount = counts[d[0] + \",\" + d[1]];\n\t// \t    return r(parseInt(thisCount));\n\t// \t  })\n\t// \t  .attr(\"cx\", function(d) {\n\t// \t\t  console.log(parseInt(d[0]));\n\t// \t    return x(parseInt(d[0]));\n\t// \t  })\n\t// \t  .attr(\"cy\", function(d) {\n\t// \t\t  console.log(parseInt(d[1]));\n\t// \t    return y(parseInt(d[1]));\n\t// \t  })\n\t// \t  .attr(\"opacity\", '.6')\n\t// \t  .attr(\"class\", function(d) {\n\t// \t    if (d[0] > d[1]) {\n\t// \t      return \"horns-color\";\n\t// \t    } else {\n\t// \t      return \"sooners-color\";\n\t// \t    }\n\t// \t  })\n\t// \t  .on(\"mouseenter\", function(d) {\n\t// \t\t  var thisCount = counts[d[0] + \",\" + d[1]];\n\t// \t\t  var xCoord = d3.mouse(this)[0];\n\t// \t\t  var yCoord = d3.mouse(this)[1];\n\t//\n\t// \t\t  positionToolTip(xCoord, yCoord, halfpoint, margin);\n\t//\n\t// \t\t  d3.select(\".hornsTipScore\").text(d[0]);\n\t// \t\t  d3.select(\".soonersTipScore\").text(d[1]);\n\t// \t\t  d3.select(\".tipPredict\").text(thisCount);\n\t// \t  })\n\t// \t  .on(\"mouseleave\", function() {\n\t// \t\t  d3.select(\"#tooltip\")\n\t// \t\t  \t.classed(\"noShow\", true);\n\t// \t  });\n\t//\n\t// \t//Set small dots on top of big ones\n\t// \t  d3.selectAll(\"circle\")\n\t// \t  .each(function(d) {\n\t// \t    var rad =  parseInt(d3.select(this).attr(\"r\"));\n\t// \t    if (rad < 10) {\n\t// \t      this.parentElement.appendChild(this);\n\t// \t    }\n\t// \t});\n\t//\n\t// \t//Draw the diagonal\n\t// \tsvg.append(\"line\")\n\t// \t  .attr(\"x1\", height)\n\t// \t  .attr(\"y1\", 0)\n\t// \t  .attr(\"x2\", 0)\n\t// \t  .attr(\"y2\", height)\n\t// \t  .attr(\"stroke-width\", 2)\n\t// \t  .attr(\"class\", \"diagonal\")\n\t// \t  .attr(\"stroke\", \"#329ce8\");\n\t//\n\t// \t//Draw the labels\n\t// \tsvg.append(\"text\")\n\t// \t  .attr(\"text-anchor\", \"middle\")\n\t// \t//   .attr(\"x\", height / 2)\n\t// \t//   .attr(\"y\", -30)\n\t// \t  .attr(\"x\", width / 2 * -1)\n\t// \t  .attr(\"y\", -25)\n\t// \t  .attr(\"transform\", \"rotate(-90)\")\n\t// \t  .attr(\"class\", \"team-name\")\n\t// \t  .text(\"Sooners’ score\");\n\t//\n\t// \tsvg.append(\"text\")\n\t// \t  .attr(\"text-anchor\", \"middle\")\n\t// \t  .attr(\"y\", width + 30)\n\t// \t  .attr(\"x\", width / 2)\n\t// \t  .attr(\"class\", \"team-name\")\n\t// \t  .text(\"Longhorns’ score\");\n\t// }\n\t//\n\t// function positionToolTip(xCoord, yCoord, halfpoint, margin) {\n\t//\n\t// \t\ttooltipWidth = 180;\n\t//\n\t// \t\tif ($(window).width() <= 600) {\n\t// \t\t\ttooltipWidth = 120;\n\t// \t\t}\n\t//\n\t// \t\td3.select(\"#tooltip\")\n\t// \t\t.classed(\"noShow\", false)\n\t// \t\t.style(\"left\", function(d) {\n\t// \t\t\tvar position = xCoord <= halfpoint ? xCoord + margin.left + 20 + \"px\" : xCoord + margin.left - (tooltipWidth + 20) + \"px\";\n\t// \t\t\treturn position;\n\t// \t\t})\n\t// \t\t.style(\"top\", yCoord + \"px\");\n\t// \t}\n\t//\n\t//\n\t// //setting min height for chart\n\t// var chartWidth = $(\"#chartBlock\").width();\n\t// $(\"#chartBlock\").css(\"min-height\", chartWidth);\n\n});\n"],"sourceRoot":"/source/"}